/**
 * Module dependencies
 */

var request = require('request');



/**
 * Errors
 */

var errors = {

	notCompatible: function (methodName) {
		return new Error('This method (`' + methodName + '`) ' +
			'cannot be used on the server by Node.js.'
		);
	},

	notYetSupported: function (methodName) {
		return new Error ('The method (`' + methodName + '`) is ' + 
			'not yet supported by the Deezer API.');
	}

};




// todo: clarify whether there's an api version

// docs, for reference: http://developers.deezer.com/api
// oh good there's jsonp!

// API Explorer:
// http://developers.deezer.com/api/explorer


/**
 * Expose public API to module users
 *
 * > Note that the usage is explicitly different from the client-side
 * > JavaScript SDK to avoid the confusion ofttimes associated with
 * > Node.js libraries which come after their client-side counterparts.
 */

function DZ () {

	// Main API endpoint URL
	// Pulled from http://developers.deezer.com/api
	this.apiEndpointUrl = 'https://api.deezer.com';


	// Main authentication endpoint for OAuth
	// Pulled from http://developers.deezer.com/api/oauth
	this.authenticationUrl = 'https://connect.deezer.com/oauth/auth.php';




	/**
	 * Get the authentication url where your user should be redirected
	 *
	 * @param {String} appId		(your Deezer application id from the Deezer developer portal)
	 * @param {String} callbackUrl	(URL which will handle the user's code from Deezer)
	 *		NOTE: `callbackUrl` must be within the 'Application domain' specified for this app 
	 *		in your Deezer developer portal at: http://developers.deezer.com/myapps
	 */

	this.getLoginUrl = function () {
		return this.authenticationUrl + '/';
		// TODO: stub
	};



	/**
	 * Send an API request to Deezer
	 *
	 * @param {String} accessToken		(the OAuth token representing a user's session)
	 * @param {Function} cb
	 *		@param {Error|null} err
	 */

	this.request = function () {
		// TODO: stub
	};



	/**
	 * Generate an access token to access a user's Deezer account
	 *
	 * > NOTE: You must first have a valid `code` from the user proving that they're OK with this!!
	 * > You can get a code by redirecting the user to the url generated by calling `DZ.getLoginUrl(appId, callbackUrl)`
	 * > You'll probably want to call `DZ.createSession()` from the handler for the `callbackUrl` you specified
	 * > in `getLoginUrl(appId, callbackUrl)`, since that's where you'll have access to the `code`
	 *
	 * @param {String} code			(the OAuth `code` generated by Deezer and sent to the `callbackUrl`)
	 * @param {String} appSecret	(your Deezer app's secret from the developer portal)
	 * @param {Function} cb
	 *		@param {Error|null} err
	 */
	
	this.createSession = function (accessToken, cb) {
		// TODO: stub
	};




	/**
	 * Lookup the validity of a Deezer user session for your app (i.e. access token)
	 *
	 * @param {String} accessToken		(the OAuth token representing a user's session)
	 * @param {Function} cb
	 *		@param {Error|null} err
	 */
	
	this.checkSession = function (accessToken, cb) {

		// Doesn't appear to be a way to do this,
		// at least in the current API doc here:
		// http://developers.deezer.com/api
		throw errors.notYetSupported('checkSession');
	};



	/**
	 * Invalidate/destroy the specified user's session
	 *
	 * @param {String} accessToken		(the OAuth token representing a user's session)
	 * @param {Function} cb
	 *		@param {Error|null} err
	 */
	
	this.destroySession = function (accessToken, cb) {

		// Doesn't appear to be a way to do this,
		// at least in the current API doc here:
		// http://developers.deezer.com/api
		throw errors.notYetSupported('destroySession');
	};





	/**
	 * More initialization/configuration logic
	 */

	// Ensure that both URLs have no trailing slash
	this.apiEndpointUrl.replace(/\/$/, '');
	this.authenticationUrl.replace(/\/$/, '');




	// Compatibility / warnings:
	// 
	// Note: Methods in the JavaScript SDK are covered here w/ 
	// explicit errors to avoid confusion about what's possible from
	// the server.
	this.init = function () {
		throw errors.notCompatible('init');
	};
	this.login = function () {
		throw errors.notCompatible('login');
	};
	this.logout = function () {
		throw errors.notCompatible('logout');
	};
	this.getLoginStatus = function () {
		throw errors.notCompatible('getLoginStatus');
	};
	this.api = function () {
		throw errors.notCompatible('api');
	};
	this.player = function playerNotCompatible () {
		throw errors.notCompatible('player');
	};

	this.player.playTracks = playerNotCompatible;
	this.player.playAlbum = playerNotCompatible;
	this.player.playPlaylist = playerNotCompatible;
	this.player.playRadio = playerNotCompatible;
	this.player.playSmartRadio = playerNotCompatible;
	this.Event = {
		subscribe: function () {
			throw errors.notCompatible('Event.subscribe');
		}
	};
}

module.exports = DZ;